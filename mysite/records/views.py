import base64
import io
import urllib

import matplotlib.pyplot as plt
import matplotlib
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django.http import HttpResponse
from django.shortcuts import render, redirect
from django.db.models.functions import ExtractMonth
from django.db.models import Sum

from .forms import UserLoginForm, UserRegisterForm, ProfileForm
from .models import UserProfile, Expense, Income, Budget


# Create your views here.

def user_login(request):
    if request.method == 'POST':
        user_login_form = UserLoginForm(data=request.POST)
        if user_login_form.is_valid():
            # get legal data
            data = user_login_form.cleaned_data
            # check if the account and password is right.
            # if right, return the user
            user = authenticate(username=data['username'], password=data['password'])
            if user:
                # save user's data in session, then realize login
                login(request, user)
                return redirect("records:home", id=user.id)
            else:
                return HttpResponse("Error in Account or Password")
        else:
            return HttpResponse("Illegal account or password")
    elif request.method == 'GET':
        user_login_form = UserLoginForm()
        context = {'form': user_login_form}
        return render(request, 'records/login.html', context)
    else:
        return HttpResponse("Please use GET or POST to request")


@login_required(login_url='/records/login/')
def user_logout(request):
    logout(request)
    return redirect("records:login")


def user_register(request):
    if request.method == 'POST':
        user_register_form = UserRegisterForm(data=request.POST)
        if user_register_form.is_valid():
            new_user = user_register_form.save(commit=False)
            # Set password
            new_user.set_password(user_register_form.cleaned_data['password'])
            new_user.save()
            # Save data and login immediately, then return.
            login(request, new_user)
            return redirect("records:login")
        else:
            return HttpResponse("Wrong input. Please input again.")
    elif request.method == 'GET':
        user_register_form = UserRegisterForm()
        context = {'form': user_register_form}
        return render(request, 'records/register.html', context)
    else:
        return HttpResponse("Please use GET or POST to request.")


@login_required(login_url='/records/login/')
def profile_edit(request, id):
    user = User.objects.get(id=id)
    # user_id is automatically generated by OneToOneField
    profile = UserProfile.objects.get(user_id=id)

    if request.method == 'POST':
        # Check if the person is the right user.
        if request.user != user:
            return HttpResponse("You have no authority to change it.")

        profile_form = ProfileForm(data=request.POST)
        if profile_form.is_valid():
            # Get legal data
            profile_cd = profile_form.cleaned_data
            profile.gender = profile_cd['gender']
            profile.save()
            return redirect("records:home", id=id)
        else:
            return HttpResponse("Error in register form. Please input again.")

    elif request.method == 'GET':
        profile_form = ProfileForm()
        context = {'profile_form': profile_form, 'profile': profile, 'user': user}
        return render(request, 'records/edit.html', context)
    else:
        return HttpResponse("Please use POST or GET to request.")


@login_required(login_url='/records/login/')
def home(request, id):
    user = User.objects.get(id=id)
    if request.method == 'POST':
        # Check if the person is the right user.
        if request.user != user:
            return HttpResponse("You have no authority to change it.")

    expense = Expense.objects.filter(user_id=id)
    income = Income.objects.filter(user_id=id)
    budget = Budget.objects.filter(user_id=id)
    plot = home_plot(id)
    if budget or income or expense:
        balance = get_balance(id)
    else:
        balance = 0
    context = {'user': user, 'expense': expense, 'income': income, 'budget': budget, 'plot': plot, 'balance': balance}
    return render(request, 'records/home.html', context)


@login_required(login_url='/records/login/')
def expense_add(request, id):
    if request.method == 'POST':
        amount = request.POST.get('amount')
        day = request.POST.get('day')
        expense_type = request.POST.get('type')
        payment_method = request.POST.get('payment_method')
        currency_type = request.POST.get('currency_type')
        if amount == '' or day == '' or expense_type == '' or payment_method == '' or currency_type == '':
            return render(request, 'records/expense_add.html', {'ret': 'Please fill in all options.'})
        Expense.objects.create(user_id=id, amount=amount, day=day, expense_type=expense_type,
                               payment_method=payment_method,
                               currency_type=currency_type)
        return redirect("records:home", id=id)
    return render(request, 'records/expense_add.html')


@login_required(login_url='/records/login/')
def income_add(request, id):
    if request.method == 'POST':
        amount = request.POST.get('amount')
        day = request.POST.get('day')
        currency_type = request.POST.get('currency_type')
        if amount == '' or day == '' or currency_type == '':
            return render(request, 'records/income_add.html', {'ret': 'Please fill in all options.'})
        Income.objects.create(user_id=id, amount=amount, day=day, currency_type=currency_type)
        return redirect("records:home", id=id)
    return render(request, 'records/income_add.html')


@login_required(login_url='/records/login/')
def budget_add(request, id):
    if request.method == 'POST':
        amount = request.POST.get('amount')
        month = request.POST.get('month')
        currency_type = request.POST.get('currency_type')
        if amount == '' or month == '' or currency_type == '':
            return render(request, 'records/budget_add.html', {'ret': 'Please fill in all options.'})
        if Budget.objects.filter(day__range=(month + '-01', month + '-29')):
            return render(request, 'records/budget_add.html', {'ret': 'Budget for that month already exist.'})
        day = month + '-01'
        Budget.objects.create(user_id=id, amount=amount, day=day, currency_type=currency_type)
        return redirect("records:home", id=id)
    return render(request, 'records/budget_add.html')


@login_required(login_url='/records/login/')
def expense_delete(request, user_id, id):
    print(Expense.objects.filter(id=id))
    Expense.objects.filter(id=id).delete()
    return redirect("records:home", user_id)


@login_required(login_url='/records/login/')
def income_delete(request, user_id, id):
    print(Income.objects.filter(id=id))
    Income.objects.filter(id=id).delete()
    return redirect("records:home", user_id)


@login_required(login_url='/records/login/')
def budget_delete(request, user_id, id):
    print(Budget.objects.filter(id=id))
    Budget.objects.filter(id=id).delete()
    return redirect("records:home", user_id)


@login_required(login_url='/records/login/')
def expense_change(request, user_id, id):
    target = Expense.objects.get(id=id)
    print(target)
    if request.method == 'POST':
        amount = request.POST.get('amount')
        day = request.POST.get('day')
        expense_type = request.POST.get('type')
        payment_method = request.POST.get('payment_method')
        currency_type = request.POST.get('currency_type')
        if amount == '' or day == '' or expense_type == '' or payment_method == '' or currency_type == '':
            return render(request, 'records/expense_change.html', {'ret': 'Please fill in all options.'})
        Expense.objects.filter(id=id).update(amount=amount, day=day, expense_type=expense_type,
                                             payment_method=payment_method, currency_type=currency_type)
        return redirect('records:home', user_id)
    else:
        return render(request, 'records/expense_change.html', {'target': target})


@login_required(login_url='/records/login/')
def income_change(request, user_id, id):
    target = Income.objects.get(id=id)
    print(target)
    if request.method == 'POST':
        amount = request.POST.get('amount')
        day = request.POST.get('day')
        currency_type = request.POST.get('currency_type')
        if amount == '' or day == '' or currency_type == '':
            return render(request, 'records/income_change.html', {'ret': 'Please fill in all options.'})
        Income.objects.filter(id=id).update(amount=amount, day=day, currency_type=currency_type)
        return redirect('records:home', user_id)
    else:
        return render(request, 'records/income_change.html', {'target': target})


@login_required(login_url='/records/login/')
def budget_change(request, user_id, id):
    target = Budget.objects.get(id=id)
    print(target)
    if request.method == 'POST':
        amount = request.POST.get('amount')
        currency_type = request.POST.get('currency_type')
        if amount == '' or currency_type == '':
            return render(request, 'records/income_change.html', {'ret': 'Please fill in all options.'})
        Budget.objects.filter(id=id).update(amount=amount, currency_type=currency_type)
        return redirect('records:home', user_id)
    else:
        return render(request, 'records/budget_change.html', {'target': target})


@login_required(login_url='/records/login/')
def search(request, id):
    if request.GET:
        print(request.GET)
        if 'expense' in request.GET.get('records'):
            if 'date_from' and 'date_to' and "expense_type[]" in request.GET:
                date_from = request.GET.get('date_from')
                date_to = request.GET.get('date_to')
                expense_type_list = request.GET.getlist("expense_type[]")
                payment_method_list = request.GET.getlist("payment_method[]")
                currency_type_list = request.GET.getlist('currency_type[]')
                expense_list = Expense.objects.filter(user_id=id, day__range=(date_from, date_to),
                                                      expense_type__in=expense_type_list,
                                                      payment_method__in=payment_method_list,
                                                      currency_type__in=currency_type_list)
                return render(request, 'records/search.html', {'expense_list': expense_list})
            else:
                return render(request, 'records/search.html', {'rel': 'Please select all options.'})

        if 'income' in request.GET.get('records'):
            if 'date_from' and 'date_to' and "currency_type[]" in request.GET:
                date_from = request.GET.get('date_from')
                date_to = request.GET.get('date_to')
                currency_type_list = request.GET.getlist('currency_type[]')
                income_list = Income.objects.filter(user_id=id, day__range=(date_from, date_to),
                                                    currency_type__in=currency_type_list)
                return render(request, 'records/search.html', {'income_list': income_list})
            else:
                return render(request, 'records/search.html', {'rel': 'Please select all options.'})

        if 'budget' in request.GET.get('records'):
            if 'date_from' and 'date_to' and "currency_type[]" in request.GET:
                date_from = request.GET.get('date_from')
                date_to = request.GET.get('date_to')
                currency_type_list = request.GET.getlist('currency_type[]')
                budget_list = Budget.objects.filter(user_id=id, day__range=(date_from, date_to),
                                                    currency_type__in=currency_type_list)
                return render(request, 'records/search.html', {'budget_list': budget_list})
            else:
                return render(request, 'records/search.html', {'rel': 'Please select all options.'})
    else:
        return render(request, 'records/search.html', {'rel': 'fail to search'})


def update_all_usd_amount(uid):
    update_usd_amount(Income, uid)
    update_usd_amount(Expense, uid)
    update_usd_amount(Budget, uid)


def update_usd_amount(table_type, uid):
    table_obj = table_type.objects.filter(user_id=uid)
    exchange_map = {"RMB": 0.14, "JPY": 0.0096, "EUR": 1.19, "USD": 1}
    for obj in table_obj:
        obj.amount_usd = obj.amount * exchange_map[obj.currency_type]
        obj.save()
    # print(table_type)
    # print(table_obj.values())
    # print("\n")


def home_plot(id):
    update_all_usd_amount(id)
    matplotlib.use('agg')
    plt.close('all')
    fig, axs = plt.subplots(2)
    budget_month(id, axs[0])
    income_expense_month(id, axs[1])
    plt.tight_layout()

    fig = plt.gcf()
    # convert graph into string buffer and then we convert 64 bit code into image
    buf = io.BytesIO()
    fig.savefig(buf, format='png')
    buf.seek(0)
    string = base64.b64encode(buf.read())
    uri = urllib.parse.quote(string)
    return uri


@login_required(login_url='/records/login/')
def summary(request, id):
    update_all_usd_amount(id)
    matplotlib.use('agg')
    plt.close('all')

    fig, axs = plt.subplots(nrows=2, ncols=2)
    ax1 = axs[0, 0]
    ax2 = axs[0, 1]
    ax3 = axs[1, 0]
    ax4 = axs[1, 1]

    plt.tight_layout()
    ex_type(id, ax1)
    ex_cur(id, ax2)
    pay_method(id, ax3)
    inc_cur(id, ax4)

    fig = plt.gcf()
    # convert graph into string buffer and then we convert 64 bit code into image
    buf = io.BytesIO()
    fig.savefig(buf, format='png')
    buf.seek(0)
    string = base64.b64encode(buf.read())
    uri = urllib.parse.quote(string)
    return render(request, 'records/summary.html', {'data': uri})


# 计算每个月income和expense总和
# 注意：添加数据的时候 income和expense要出现在同样的月份，即如果八月有expense，但没有income数据，会报错
def income_expense_month(id, ax):
    update_all_usd_amount(id)
    expense_month = Expense.objects.filter(user_id=id) \
        .annotate(month=ExtractMonth('day')) \
        .values('month') \
        .annotate(sum=Sum('amount_usd')) \
        .order_by('month')
    income_month = Income.objects.filter(user_id=id) \
        .annotate(month=ExtractMonth('day')) \
        .values('month') \
        .annotate(sum=Sum('amount_usd')) \
        .order_by('month')
    print(expense_month)
    print(income_month)

    x = []
    exp_per_mon = []
    for i in expense_month:
        x.append(i['month'])
        exp_per_mon.append(i['sum'])
    y = []
    inc_per_mon = []
    for j in income_month:
        y.append(j['month'])
        inc_per_mon.append(j['sum'])

    if expense_month and income_month:
        i = 0
        while i < min(len(x), len(y)):
            if x[i] < y[i]:
                y.insert(i, (x[i]))
                inc_per_mon.insert(i, 0)
            elif x[i] > y[i]:
                x.insert(i, y[i])
                exp_per_mon.insert(i, 0)
            i += 1
        while len(x) < len(y):
            dif = len(y)-len(x)
            x.append(y[-dif])
            exp_per_mon.append(0)
        while len(y) < len(x):
            dif = len(x)-len(y)
            y.append(x[-dif])
            inc_per_mon.append(0)
    if not x and y:
        for i in y:
            x.append(i)
            exp_per_mon.append(0)
    if not y and x:
        for i in x:
            y.append(i)
            inc_per_mon.append(0)
    ax.stackplot(x, exp_per_mon, inc_per_mon, labels=['Expense', 'Income'])
    plt.legend(loc='upper left')
    plt.xticks(x)
    plt.xlabel('month')
    plt.ylabel('amount(USD)')
    plt.title("Monthly Expenses vs Incomes in USD")
    # plt.show()


# budget随月份变化plot
def budget_month(id, ax):
    update_all_usd_amount(id)
    budget_month = Budget.objects.filter(user_id=id) \
        .annotate(month=ExtractMonth('day')) \
        .values('month') \
        .annotate(sum=Sum('amount_usd')) \
        .order_by('month')

    x = []
    budg_per_mon = []
    for i in budget_month:
        x.append(i['month'])
        budg_per_mon.append(i['sum'])
    # print(x,budg_per_mon)
    ax.plot(x, budg_per_mon)
    ax.set_xticks(x)
    ax.set_xlabel('month')
    ax.set_ylabel('amount(USD)')
    ax.set_title("Monthly Budget in USD")
    # plt.show()


# expense type的饼图
def ex_type(id, ax):
    update_all_usd_amount(id)
    print("id = ", id)
    expense = Expense.objects.filter(user_id=id)
    ex_types = set(map(lambda x: x.expense_type, expense))
    plt_dict = {}
    for t in ex_types:
        objs = filter(lambda x: x.amount_usd if x.expense_type == t else None, expense)
        count = sum(map(lambda x: x.amount_usd, objs))
        plt_dict[t] = count

    # print(ex_types)
    draw(plt_dict, ax)
    ax.set_title("Expense Type Ratio in USD")
    # ax.legend()


# expense currency type的饼图
def ex_cur(id, ax):
    update_all_usd_amount(id)
    print("id = ", id)
    expense = Expense.objects.filter(user_id=id)
    cur_types = set(map(lambda x: x.currency_type, expense))
    plt_dict = {}
    for t in cur_types:
        objs = filter(lambda x: x.amount if x.currency_type == t else None, expense)
        count = sum(map(lambda x: x.amount_usd, objs))
        plt_dict[t] = count

    # print(ex_types)
    draw(plt_dict, ax)
    ax.set_title("Expense Currency Type Ratio")


# payment method的饼图
def pay_method(id, ax):
    update_all_usd_amount(id)
    print("id = ", id)
    expense = Expense.objects.filter(user_id=id)
    method = set(map(lambda x: x.payment_method, expense))
    plt_dict = {}
    for t in method:
        objs = filter(lambda x: x.amount_usd if x.payment_method == t else None, expense)
        count = sum(map(lambda x: x.amount_usd, objs))
        plt_dict[t] = count

    # print(ex_types)
    draw(plt_dict, ax)
    ax.set_title("Payment Method Ratio in USD")
    # ax.legend()


# income currency type的饼图
def inc_cur(id, ax):
    update_all_usd_amount(id)
    print("id = ", id)
    income = Income.objects.filter(user_id=id)
    cur_types = set(map(lambda x: x.currency_type, income))
    plt_dict = {}
    for t in cur_types:
        objs = filter(lambda x: x.amount if x.currency_type == t else None, income)
        count = sum(map(lambda x: x.amount_usd, objs))
        plt_dict[t] = count

    # print(ex_types)
    draw(plt_dict, ax)
    ax.set_title("Income Currency Type Ratio")
    # ax.legend()


def draw(plt_dict, ax):
    print(plt_dict)
    plt_types = plt_dict.keys()
    plt_values = plt_dict.values()

    def func(pct, allvals):
        absolute = int(pct / 100 * sum(allvals))
        return "{:.1f}%\n(${:d})".format(pct, absolute)

    # ax.figure(figsize=(8,8)) #调节图形大小
    # explode = (0,0,0,0) #将某一块分割出来，值越大分割出的间隙越大
    ax.pie(plt_values,  # 每块值
           # labels=plt_types,  # 定义标签,
           # autopct = '%3.2f%%', #数值保留固定小数位
           autopct=lambda pct: func(pct, plt_values),
           shadow=False,  # 无阴影设置
           startangle=90,  # 逆时针起始角度设置
           radius=2,
           textprops={'fontsize': 6, 'color': 'black'},
           pctdistance=0.5)  # 数值距圆心半径倍数距离
    ax.legend(labels=plt_types, loc='lower right', fontsize=6)
    ax.axis('equal')


# raw sql query
def get_balance(uid):
    from django.db import connection

    cursor = connection.cursor()
    sql = """SELECT u.user_id, total_expense, total_budget, total_budget - total_expense as balance
                    FROM records_userprofile u JOIN
            (SELECT e.user_id, SUM(e.amount_usd) as total_expense, temp.total_budget
            FROM records_expense e 
            LEFT OUTER JOIN 
            (SELECT b.user_id, SUM(b.amount_usd) as total_budget
            FROM records_budget b GROUP BY b.user_id) as temp ON e.user_id = temp.user_id 
            GROUP BY e.user_id) as tem on u.user_id = tem.user_id AND u.user_id={0}
                        """.format(uid)
    cursor.execute(sql)
    balance = cursor.fetchall()[0][3]
    return balance
